#!/bin/bash
##
# NOTE: THESE WILL NOT WORK YET WITH PRESSMATIC
#
# Hook into git pre-commit event
# Run tests when commiting
##

##
# This script can be called from anywhere so it's good to be in the correct location
# This can also be called in .git/hooks dir and we need to get into project root
##
cd "$( dirname "${BASH_SOURCE[0]}" )"/../..

# git diff --name only gives project root relative paths
# we use this for making creating absolute paths
REPO_DIR=$(git rev-parse --show-toplevel)
# Don't use GIT_DIR, as the git binary expects it to point to the .git directory

# Return non-zero if can't be run in vagrant
function vagrant_available {
  if command_available vagrant ; then
    if vagrant status --machine-readable | grep state,running --quiet; then
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

#Check if binary exists
function command_available {
  type $1 &> /dev/null
  return $?
}

##
# Warn if there are unstaged changes in tracked files or untracked files present.
# Such extra files might influence the integration tests to show a false result
# compared to what the to-be-committed git head would have in a clean working
# directory
##
function git_non_committed_changes {
  NONSTAGED=$(git status --porcelain | grep -E '^( M|MM|\?\?)')
  if [[ $NONSTAGED != '' ]]; then
    echo "==> Non-committed extra files present at commit time - integration test results might be false!"
    echo "$NONSTAGED"
  fi
}

# Check locally if there's something extra which might affect the test results
if vagrant_available; then
  git_non_committed_changes
fi

# Save all errors in array
errors=()

# Loop all files that are about to be committed (diff of git head and staged)
echo "==> Checking syntax errors..."
for FILE in $(git diff --cached --name-only); do
  resource="$REPO_DIR/$FILE"

  ##
  # Test PHP syntax for all changed *.php and *.module files
  ##
  if [[ "$FILE" =~ ^.+(php|module)$ ]]; then
    if [[ -f $resource ]]; then
      php -l "$resource" 1> /dev/null
      if [ $? -ne 0 ]; then
        errors+=("PHP syntax Error: $FILE")
      fi
    fi
  fi

  ##
  # Check that nginx configs (*.conf) work with (nginx -t) before commiting
  # Maybe nginx should be updated here to really know impact to later tests
  ##
  if [[ "$FILE" =~ ^nginx.+(conf)$ ]]; then
    if [[ -f $resource ]]; then
      ! command_available nginx || nginx -t 1> /dev/null 2>&1
      if [ $? -ne 0 ]; then
        errors+=("nginx config error: $FILE")
      fi
    fi
  fi
done

##
# Run time consuming rspec tests as the last step
##
if vagrant_available; then
  echo "==> Running tests in Vagrant..."
  vagrant ssh -c "sudo bash /data/wordpress/scripts/hooks/pre-commit"
  exit $?
fi

##
# Display all errors
##
if [ ${#errors[@]} -ne 0 ]; then
    for i in "${errors[@]}"
    do
        echo "==> $i"
        echo "==> To skip these tests run: 'git commit -n'"
    done
    exit 1
fi

##
# Run pre defined integration tests
# Wrap in quotation marks in case path name has spaces
##
eval '"$REPO_DIR/scripts/run-tests"'

#Block commiting if tests fail
if [ $? -ne 0 ]; then
  echo "==> You can skip tests when commiting with 'git commit -n'"
  echo "==> Tests failed! Git commit denied..."
  exit 1
else
  echo "==> Tests passed!"
fi
